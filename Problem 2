#Isomorphic Strings
#The approach uses two dictionaries to maintain the mappings between characters in strings s and t. 
#It iterates through the characters in both strings simultaneously, ensuring consistent mappings. 
#The time complexity is O(N), where N is the length of the input strings, as it involves iterating through the characters once.


class Solution(object):
    def isIsomorphic(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: bool
        """
        s_to_t_mapping = {}
        t_to_s_mapping = {}

        for char_s, char_t in zip(s, t):
            if char_s in s_to_t_mapping:
                if s_to_t_mapping[char_s] != char_t:
                    return False
            else:
                s_to_t_mapping[char_s] = char_t

            if char_t in t_to_s_mapping:
                if t_to_s_mapping[char_t] != char_s:
                    return False
            else:
                t_to_s_mapping[char_t] = char_s

        return True

