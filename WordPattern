// time complexity: O(n)
// space complexity: O(n)
//successfully executed on leetcode

class WordPattern {
    public boolean wordPattern(String pattern, String s) {

        if(pattern.length()==0 || s.length()==0){
            return false;
        }
          String[] strs = s.split(" ");
         if(pattern.length()!=strs.length) {
            return false;
        }

        HashMap<Character, String> pMap= new HashMap<>();
        HashMap<String, Character> sMap= new HashMap<>();
      

        for(int i =0; i<pattern.length(); i++){
            char pChar = pattern.charAt(i);
            String str = strs[i];

            if(!pMap.containsKey(pChar)){
                pMap.put(pChar, str);
            }
            else{
                if(!pMap.get(pChar).equals(str)){
                    return false;
                }
            }
             if(!sMap.containsKey(str)){
                sMap.put(str, pChar);
            }
            else{
                if(!sMap.get(str).equals(pChar)){
                    return false;
                }
            }

        }
        return true;
    }
}
