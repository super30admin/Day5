// Time Complexity :O(n)// for 2nd solution
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No


// Your code here along with comments explaining your approach
// solution 1 ///solution 2 is below itmatlab sahi ja raha hao
//we convert each string in an array, sort the array and use it as a key in hash map, if kery alreadty exist we add the String
//in that ArrayList at that index or we create a new ArrayList at that index

class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        if(strs == null) return new ArrayList<>();
        HashMap<String, List<String>> map = new HashMap<>();
        
        for(int i = 0; i<strs.length; i++){
            char[] charArr = strs[i].toCharArray();
            Arrays.sort(charArr);
            String key = String.valueOf(charArr);
            if(map.containsKey(key)){
                map.get(key).add(strs[i]);
            }else{
                map.put(key, new ArrayList<>());
                   map.get(key).add(strs[i]);
                
            }
            
        }
        return new ArrayList<>(map.values());
        
    }
}

//solution 2
//using prime numbers array to calculate the key
//instead of sorted string as a keuy we use primeProduct as a key here.
class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        if(strs == null) return new ArrayList<>();
        HashMap<Double, List<String>> map = new HashMap<>();
        
        for(int i = 0; i<strs.length; i++){
       double primeProduct= calculatePrimeProduct(strs[i]);
            if(map.containsKey(primeProduct)){
                map.get(primeProduct).add(strs[i]);
            }else{
                map.put(primeProduct, new ArrayList<>());
                   map.get(primeProduct).add(strs[i]);
            }  
        }
        return new ArrayList<>(map.values());    
    }
    
    public double calculatePrimeProduct(String str){
        int[] prime ={2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101};
        
        double result = 1;
        
        for(int i =0; i<str.length(); i++){
            result= result* prime[str.charAt(i)- 'a'];
        }
        return result;        
    } 
}