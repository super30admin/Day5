// Approach 1 - using two hashmaps
// Time Complexity : O(N), N is the length of the string
// Space Complexity : O(1)
// Did this code successfully run in leetcode : Yes
// Any problems faced : No
// Two hashmaps are used, one for mapping characters in s to t and other for mapping characters from t to s
// using same map will fail for s = "eggd" and t = "addm"

// class Solution {
// public:
//     bool isIsomorphic(string s, string t) {
//         unordered_map<char, char> smap;
//         unordered_map<char, char> tmap;
//         for(int i = 0; i < s.size(); i++) {
//             if(smap[s[i]] == 0 && tmap[t[i]] == 0) {
//                 smap[s[i]] = t[i];
//                 tmap[t[i]] = s[i];
//             } else {
//                 if(smap[s[i]] != t[i] || tmap[t[i]] != s[i]) {
//                     return false;
//                 }
//             }
//         }
//         return true;
//     }
// };



// Approach 2 - using a hashmap and a hashset
// Time Complexity : O(N)
// Space complexity : O(1)
// Instead of storing the mapping of t to s in a hashmap, we can store it in a hashset

class Solution {
public:
    bool isIsomorphic(string s, string t) {
        unordered_map<char, char> smap;
        unordered_set<char> tset;
        for(int i = 0; i < s.size(); i++) {
            if(smap[s[i]] == 0) {
                if(!(tset.find(t[i]) != tset.end())) {
                    smap[s[i]] = t[i];
                    tset.insert({t[i]});
                } else {
                    return false;
                }
            } else {
                if(!(smap[s[i]] == t[i])) {
                    return false;
                }
            }
        }
        return true;
    }
};