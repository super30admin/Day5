class Solution {
    /*
    Time Complexity - O(n)
    Space Complexity - O(n)
    */
    public List<List<String>> groupAnagrams(String[] strs) {
        List<List<String>> results = new ArrayList<>();

        if (strs == null || strs.length == 0) {
            return results;
        }

        final Map<String, List<String>> ans = new HashMap<>();
        int[] count = new int[26];
        for (String s : strs) {
            Arrays.fill(count, 0);
            for (char c : s.toCharArray()) {
                count[c -'a']++;
            }
            StringBuilder sb = new StringBuilder();
            for (int i=0; i<26; i++) {
                sb.append("#");
                sb.append(count[i]);
            }
            final String key = sb.toString();
            if (!ans.containsKey(key)) {
                ans.put(key, new ArrayList<>());
            }
            ans.get(key).add(s);
        }
        return new ArrayList<List<String>>(ans.values());
    }
}
