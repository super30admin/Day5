//https://leetcode.com/problems/word-pattern/description/
//Time Complexity : O(n+m) where n is the length of the pattern and m is the length of the string s
// Space Complexity : O(n+m)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No


// Your code here along with comments explaining your approach
// Declare a two hash maps to store the characters in the pattern and the mapped strings in s.
// Split the s whenever an empty space is found, store the words in a vector (in this case, res)
// Check for each char in pattern, a string already exists. Do the same for every word in the s.


class Solution {
public:
    bool wordPattern(string pattern, string s) {
        unordered_map<char,string> mp1;
        unordered_map<string,char> mp2;
        vector<string> res;
        string str="";
        for(int i=0; i<s.size(); i++){
            if(s[i] == ' '){
                res.push_back(str);
                str="";
            }
            else{
                str = str+s[i];
            }
        }
        if(!str.empty()) res.push_back(str);
        if(pattern.size() != res.size()) return false;
        for(int i=0; i<pattern.size(); i++){
            if(mp1.count(pattern[i]) && mp1[pattern[i]] != res[i]) return false;
            if(mp2.count(res[i]) && mp2[res[i]] != pattern[i]) return false;
            mp1[pattern[i]] = res[i];
            mp2[res[i]] = pattern[i];
        }
        return true;
    }
};