class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        List<List<String>> list = new ArrayList<>();
        HashMap<Double, List<String>> map = new HashMap<>();
        
        for(String s: strs){
            double primeKey  =calculatePrime(s);
            if(!map.containsKey(primeKey)){
                map.put(primeKey,new ArrayList<>());
            }
            
            map.get(primeKey).add(s);
        }
        return new ArrayList<>(map.values());
    }
    
    private double calculatePrime(String s){
        int[] primes= {2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,67,71,73,79,83,89,97,101,103};
        
        //a=65,ch-'a'=65-65=0,67-65=2;
        double result =1;
        
        for(int x=0;x<s.length();x++){
            result= result*primes[s.charAt(x)-'a']; //gives ascii values
        }
        return result; 
    }
}
 
//time complexity  : O(nk) //no.of element with num of keys
//space complexity : O(n) //no of keys will store in hashmap
// ran successsfully on leetcode
//was not able to solve before clas
