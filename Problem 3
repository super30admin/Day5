//time complexity : o(n)
//space complexity: o(2n)
// Using two hashmaps to store -  pattern to s and s to pattern.
// And traverse through the pattern characters and see if both the maps containsKey, their previous value matches.

class Solution {
    public boolean wordPattern(String pattern, String s) {
        String[] words = s.split(" ");
        Map<Character, String> charToString = new HashMap<>();
        Map<String, Character> stringToChar = new HashMap<>();
        if (words.length != pattern.length()) return false;

        for (int i=0; i < pattern.length(); i++) {
            char c = pattern.charAt(i);
            String w = words[i];
            if (charToString.containsKey(c)) {
                if (!charToString.get(c).equals(w)) {
                    return false;
                }
            } else {
                charToString.put(c, w);
            }
            if (stringToChar.containsKey(w)) {
                if (!stringToChar.get(w).equals(c)) {
                    return false;
                }
            } else {
                stringToChar.put(w, c);
            }
        }
        return true;      
    }
}
