Time complexity:O(n)
space complexity:O(n)

class Solution {
    public boolean wordPattern(String pattern, String s) 
    {
        String[] words = s.split(" ");
        if(pattern.length() != words.length) 
        {
            return false;
        }

        HashMap<Character, String> pmap = new HashMap<>();
        HashMap<String, Character> smap = new HashMap<>();

        for(int i=0; i<pattern.length(); i++)
        {
            char pchar = pattern.charAt(i);
            String sword = words[i];
            if(pmap.containsKey(pchar))
            {
                if(!pmap.get(pchar).equals(sword))
                {
                    return false;
                }
            }
            else
            {
                pmap.put(pchar,sword);
            }
            
            if(smap.containsKey(sword))
            {
                if(!smap.get(sword).equals(pchar))
                {
                    return false;
                }
            }
            else
            {
                smap.put(sword, pchar);
            }
            
        } 
    return true;
    }
}