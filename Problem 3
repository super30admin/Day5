# Word Patterns
#The approach uses two dictionaries to maintain mappings between characters in the pattern and words in the string. 
#It iterates through the characters and words simultaneously, ensuring a bijection. 
#The time complexity is O(N), where N is the length of the pattern or the number of words in the string, as it involves iterating through them once.

class Solution(object):
    def wordPattern(self, pattern, s):
        """
        :type pattern: str
        :type s: str
        :rtype: bool
        """
        pattern_to_word = {}
        word_to_pattern = {}

        words = s.split()

        if len(pattern) != len(words):
            return False

        for char, word in zip(pattern, words):
            if char in pattern_to_word:
                if pattern_to_word[char] != word:
                    return False
            else:
                pattern_to_word[char] = word

            if word in word_to_pattern:
                if word_to_pattern[word] != char:
                    return False
            else:
                word_to_pattern[word] = char

        return True
