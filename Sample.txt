//Group Anagrams
// Time Complexity :O(nk) k is average length of the words
// Space Complexity : o(nk)
// Did this code successfully run on Leetcode :Yes
// Any problem you faced while coding this :No


// Your code here along with comments explaining your approach
class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        if(strs == null || strs.length == 0) return new ArrayList<>();
        HashMap<Double, List<String>> map = new HashMap<>();
        for(String s:strs){
            double primeProduct = primeProduct(s);
            if(!map.containsKey(primeProduct)){
                map.put(primeProduct, new ArrayList<>());
            } map.get(primeProduct).add(s);
        } return new ArrayList<>(map.values());
        
    } private double primeProduct(String s){
        double result = 1;
        int [] prime = {2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103};
        for(int i = 0; i<s.length(); i++){
            char c = s.charAt(i);
            int pr = prime[c-'a'];
            result *= pr;
        } return result;
}
}

//Isomorphic Strings
// Time Complexity :O(n)
// Space Complexity : o(1)
// Did this code successfully run on Leetcode :Yes
// Any problem you faced while coding this :No


// Your code here along with comments explaining your approach
class Solution {
    public boolean isIsomorphic(String s, String t) {
        if(s == null && t == null) return true;
        if(s == null || t == null) return false;
        if(s.length() != t.length()) return false;
        HashMap<Character, Character> map = new HashMap<>();
        HashSet<Character> set = new HashSet<>();
        for( int i = 0; i<s.length(); i++){
            char sChar = s.charAt(i);
            char tChar = t.charAt(i);
            if(!map.containsKey(sChar)){
                if(!set.contains(tChar)){
                    map.put(sChar, tChar);
                    set.add(tChar);
                }else{
                    return false;
                }
            }else{
                if(map.get(sChar) != tChar) return false;
            }
        } return true;
    }
}

// Word Pattern
// Time Complexity : O(n)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No

class WordPattern {
    public boolean wordPattern(String pattern, String s) {
        String[] words = s.split("\s");
        HashMap<Character, String> wordMap = new HashMap<>();
        HashMap<String, Character> patternMap = new HashMap<>();
        if (words.length != pattern.length())
            return false;
        for (int i = 0; i < pattern.length(); i++) {
            char patChar = pattern.charAt(i);
            String word = words[i];
            if (wordMap.containsKey(patChar)) {
                if (!word.equals(wordMap.get(patChar))) {
                    return false;
                }
            } else {
                wordMap.put(patChar, word);
            }

            if (patternMap.containsKey(word)) {
                if (patChar != patternMap.get(word)) {
                    return false;
                }
            } else {
                patternMap.put(word, patChar);
            }
        }
        return true;
    }
}