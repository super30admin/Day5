// Time Complexity : O(n)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no

// take a hashmap and hashset, push pairs in hashmap and push word in hashset. if a key does not exist in the map, but the value exists in the hashset, return false, otherwise true

class Solution {
    public boolean wordPattern(String pattern, String s) {
        String[] strs = s.split(" ");
        if(pattern.length() != strs.length) {
            return false;
        }
        HashMap<Character, String> pMap = new HashMap<>();
        // HashMap<String, Character> sMap = new HashMap<>();
        HashSet<String> sSet = new HashSet<>();
        for(int i = 0; i < pattern.length(); i++) {
            char pChar = pattern.charAt(i);
            String sString = strs[i];
            if(pMap.containsKey(pChar)) {
                if(!pMap.get(pChar).equals(sString)) {
                    return false;
                }
            } else {
                pMap.put(pChar, sString);
                if(sSet.contains(sString)) {
                    return false;
                }
                sSet.add(sString);
            }
        }
        return true;
    }
}
