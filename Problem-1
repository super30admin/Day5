//https://leetcode.com/problems/group-anagrams/
// Time Complexity : O(n*k log k) where n is the length of strs, k is the average length of each string
// Space Complexity : O(n*k) 
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No


// Your code here along with comments explaining your approach
// Declare a map that stores a string and a vector of strings
// Iterate through all the strings, sort each string and store it along with the actual string


class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        int n = strs.size();
        if(n==0 || n==1){
            return {strs};
        }
        
        unordered_map<string, vector<string>> mp;
        for(auto it:strs){
            string res = it;
            sort(res.begin(),res.end());
            mp[res].push_back(it) ;
        }
        vector<vector<string>> ans;

        for(auto it:mp){
            ans.push_back(it.second);
        }
        return ans;
    }
};